<?php

/**
 * Created by PhpStorm.
 * User: Arjo
 * Date: 13-1-2016
 * Time: 17:28
 */
class Song extends DatabaseResource
{
    public static $table = "songs";
    public static $id_column = "songId";

    private $id,
            $slug,
            $title,
            $artist,
            $notes,
            $key,
            $added,
            $examples = [];

    /**
     * Song constructor.
     * @param $id
     * @param $slug
     * @param $title
     * @param $artist
     * @param $notes
     * @param $key
     * @param $added
     * @param array $examples
     */
    public function __construct($id, $slug, $title, $artist, $notes, $key, $added, array $examples)
    {
        $this->id = $id;
        $this->slug = $slug;
        $this->title = $title;
        $this->artist = $artist;
        $this->notes = $notes;
        $this->key = $key;
        $this->added = $added;
        $this->examples = $examples;
    }

    public static function fillValues(array $pdoValues)
    {
        $id = $pdoValues['songId'];
        $slug = $pdoValues['slug'];
        $title = $pdoValues['title'];
        $artist = $pdoValues['artist'];
        $notes = $pdoValues['notes'];
        $key = $pdoValues['key'];
        $added = $pdoValues['added'];
        $examples = [];

        $pdoExamples = self::fetchExamples($id);
        foreach($pdoExamples as $example) {
            array_push($examples, new Example($example['exampleId'], $example['title'], $example['type'], $example['url']));
        }

        return new self($id, $slug, $title, $artist, $notes, $key, $added, $examples);
    }

    public static function fromId($id, $table = null, $id_column = null)
    {
        $results = parent::fromId($id, self::$table, self::$id_column); // TODO: Change the autogenerated stub
        return self::fillValues($results);
    }

    public static function fromSlug($slug)
    {
        global $db, $hades;


        try {
            $statement = $db->prepare('
                SELECT *
                FROM `songs`
                WHERE `slug` = ?
            ');
            $statement->bindParam(1, $slug, PDO::PARAM_STR);
            $statement->execute();
            $results = $statement->fetch(PDO::FETCH_ASSOC);

            if ($statement->rowCount() === 0) {
                http_response_code(404);
                exit;
            }

            return self::fillValues($results);
        }
        catch (Exception $e) {
            $hades->databaseError($e);
        }

    }

    public static function fetchExamples($songId)
    {
        global $db, $hades;

        if (is_numeric($songId)) {
            try {
                $statement = $db->prepare("
                    SELECT *
                    FROM examples
                    WHERE songId = ?
                ");
                $statement->bindParam(1, $songId, PDO::PARAM_INT);
                $statement->execute();
                $results = $statement->fetchAll(PDO::FETCH_BOTH);

                return $results;
            }
            catch (Exception $e) {
                $hades->databaseError($e);
            }
        }
    }

    public function getResponseItem($detailed = false)
    {
        $song = new stdClass();
        $song->id = $this->id;
        $song->slug = $this->slug;
        $song->title = $this->title;
        $song->artist = $this->artist;
        $song->added = $this->added;
        if ($detailed) {
            $song->notes = $this->notes;
            $song->key = $this->key;
            $song->examples = $this->examples;
        }
        else {
            $song->links = [
                ResponseObject::generateLink('self', BASE_URL . 'songs/' . $this->slug),
                ResponseObject::generateLink('collection', BASE_URL . 'songs')
            ];
        }

        return $song;
    }

    public static function createNewRecord($artist, $title, $key, $notes, array $examples = [])
    {
        global $db, $hades;

        $slug = self::generateSlug($title, $artist);

        try {
            $statement = $db->prepare('
                INSERT INTO songs (title, artist, `key`, notes, slug)
                VALUES (?, ?, ?, ?, ?)
            ');
            $statement->bindParam(1, $title, PDO::PARAM_STR);
            $statement->bindParam(2, $artist, PDO::PARAM_STR);
            $statement->bindParam(3, $key, PDO::PARAM_STR);
            $statement->bindParam(4, $notes, PDO::PARAM_STR);
            $statement->bindParam(5, $slug, PDO::PARAM_STR);
            $statement->execute();

            $id = $db->lastInsertId();

            foreach ($examples as $example) {
                self::recordNewExample($example, $id);
            }

            $song = self::fromId($id);

            return $song;
        }
        catch (Exception $e) {
            $hades->databaseError($e);
        }
    }

    public static function recordNewExample($example, $songId)
    {
        global $db, $hades;

        try {
            $statement = $db->prepare('
                INSERT INTO examples (title, `type`, `url`, songId)
                VALUES (?, ?, ?, ?)
            ');
            $statement->bindValue(1, $example->getTitle());
            $statement->bindValue(2, $example->getType());
            $statement->bindValue(3, $example->getUrl());
            $statement->bindValue(4, $songId);
            $statement->execute();
        }
        catch (Exception $e) {
            $hades->databaseError($e);
        }
    }

    public function saveChanges()
    {
        global $db, $hades;

        try {
            $statement = $db->prepare('
                UPDATE songs
                SET title = ?, artist = ?, notes = ?, `key` = ?, added = ?, slug = ?
                WHERE songId = ?
            ');
            $statement->bindParam(1, $this->title, PDO::PARAM_STR);
            $statement->bindParam(2, $this->artist, PDO::PARAM_STR);
            $statement->bindParam(3, $this->notes, PDO::PARAM_STR);
            $statement->bindParam(4, $this->key, PDO::PARAM_STR);
            $statement->bindParam(5, $this->added, PDO::PARAM_STR);
            $statement->bindParam(6, $this->slug, PDO::PARAM_STR);
            $statement->bindParam(7, $this->id, PDO::PARAM_INT);

            $statement->execute();

            // TODO: Save changes to examples too.
        }
        catch (Exception $e) {
            $hades->databaseError($e);
        }
    }

    public function deleteRecord()
    {
        global $db, $hades;

        try {
            $statement = $db->prepare('
                DELETE FROM songs
                WHERE songs.songId = ?
            ');
            $statement->bindParam(1, $this->id, PDO::PARAM_INT);
            $statement->execute();

            $statement = $db->prepare('
                DELETE FROM examples
                WHERE examples.songId = ?
            ');
            $statement->bindParam(1, $this->id, PDO::PARAM_INT);
            $statement->execute();

            $statement = $db->prepare('
                SELECT *
                FROM songs
                WHERE songId = ?
            ');
            $statement->bindParam(1, $this->id, PDO::PARAM_INT);
            $statement->execute();
            $rows = $statement->rowCount();

            if ($rows === 0)
                return true;
            else
                return false;
        }
        catch (Exception $e) {
            $hades->databaseError($e);
        }
    }

    public static function generateSlug($title, $artist)
    {
        $slug = self::replace_spec_char($title);
        $slug = strtolower($slug);
        $slug = str_replace(' ', '_', $slug);
        $slug = str_replace('\'', '-', $slug);
        $slug = str_replace('"', '-', $slug);

        if (self::slugIsUnique($slug))
            return $slug;

        $artist = self::replace_spec_char($artist);
        $artist = strtolower($artist);
        $artist = str_replace(' ', '_', $artist);
        $artist = str_replace('\'', '-', $artist);
        $artist = str_replace('"', '-', $artist);

        $slugArtist = $slug . '_' . $artist;

        if (self::slugIsUnique($slugArtist))
            return $slugArtist;

        $found = false;
        for ($i = 1; $found === false || $i > 1000; $i++) {
            $tempSlug = $slug .'_'. $i;
            if (self::slugIsUnique($tempSlug))
                return $tempSlug;
        }

        return null;

    }

    public static function slugIsUnique($slug)
    {
        global $db, $hades;

        try {
            $statement = $db->prepare('
                SELECT *
                FROM songs
                WHERE slug = ?
            ');
            $statement->bindParam(1, $slug, PDO::PARAM_STR);
            $statement->execute();
            return !$statement->rowCount();
        }
        catch (Exception $e) {
            $hades->databaseError($e);
            return false;
        }
    }

    /**
     * From http://stackoverflow.com/a/33856250
     * @param $subject
     * @return string
     */
    public static function replace_spec_char($subject) {
        $char_map = array(
            "ъ" => "-", "ь" => "-", "Ъ" => "-", "Ь" => "-",
            "А" => "A", "Ă" => "A", "Ǎ" => "A", "Ą" => "A", "À" => "A", "Ã" => "A", "Á" => "A", "Æ" => "A", "Â" => "A", "Å" => "A", "Ǻ" => "A", "Ā" => "A", "א" => "A",
            "Б" => "B", "ב" => "B", "Þ" => "B",
            "Ĉ" => "C", "Ć" => "C", "Ç" => "C", "Ц" => "C", "צ" => "C", "Ċ" => "C", "Č" => "C", "©" => "C", "ץ" => "C",
            "Д" => "D", "Ď" => "D", "Đ" => "D", "ד" => "D", "Ð" => "D",
            "È" => "E", "Ę" => "E", "É" => "E", "Ë" => "E", "Ê" => "E", "Е" => "E", "Ē" => "E", "Ė" => "E", "Ě" => "E", "Ĕ" => "E", "Є" => "E", "Ə" => "E", "ע" => "E",
            "Ф" => "F", "Ƒ" => "F",
            "Ğ" => "G", "Ġ" => "G", "Ģ" => "G", "Ĝ" => "G", "Г" => "G", "ג" => "G", "Ґ" => "G",
            "ח" => "H", "Ħ" => "H", "Х" => "H", "Ĥ" => "H", "ה" => "H",
            "I" => "I", "Ï" => "I", "Î" => "I", "Í" => "I", "Ì" => "I", "Į" => "I", "Ĭ" => "I", "I" => "I", "И" => "I", "Ĩ" => "I", "Ǐ" => "I", "י" => "I", "Ї" => "I", "Ī" => "I", "І" => "I",
            "Й" => "J", "Ĵ" => "J",
            "ĸ" => "K", "כ" => "K", "Ķ" => "K", "К" => "K", "ך" => "K",
            "Ł" => "L", "Ŀ" => "L", "Л" => "L", "Ļ" => "L", "Ĺ" => "L", "Ľ" => "L", "ל" => "L",
            "מ" => "M", "М" => "M", "ם" => "M",
            "Ñ" => "N", "Ń" => "N", "Н" => "N", "Ņ" => "N", "ן" => "N", "Ŋ" => "N", "נ" => "N", "ŉ" => "N", "Ň" => "N",
            "Ø" => "O", "Ó" => "O", "Ò" => "O", "Ô" => "O", "Õ" => "O", "О" => "O", "Ő" => "O", "Ŏ" => "O", "Ō" => "O", "Ǿ" => "O", "Ǒ" => "O", "Ơ" => "O",
            "פ" => "P", "ף" => "P", "П" => "P",
            "ק" => "Q",
            "Ŕ" => "R", "Ř" => "R", "Ŗ" => "R", "ר" => "R", "Р" => "R", "®" => "R",
            "Ş" => "S", "Ś" => "S", "Ș" => "S", "Š" => "S", "С" => "S", "Ŝ" => "S", "ס" => "S",
            "Т" => "T", "Ț" => "T", "ט" => "T", "Ŧ" => "T", "ת" => "T", "Ť" => "T", "Ţ" => "T",
            "Ù" => "U", "Û" => "U", "Ú" => "U", "Ū" => "U", "У" => "U", "Ũ" => "U", "Ư" => "U", "Ǔ" => "U", "Ų" => "U", "Ŭ" => "U", "Ů" => "U", "Ű" => "U", "Ǖ" => "U", "Ǜ" => "U", "Ǚ" => "U", "Ǘ" => "U",
            "В" => "V", "ו" => "V",
            "Ý" => "Y", "Ы" => "Y", "Ŷ" => "Y", "Ÿ" => "Y",
            "Ź" => "Z", "Ž" => "Z", "Ż" => "Z", "З" => "Z", "ז" => "Z",
            "а" => "a", "ă" => "a", "ǎ" => "a", "ą" => "a", "à" => "a", "ã" => "a", "á" => "a", "æ" => "a", "â" => "a", "å" => "a", "ǻ" => "a", "ā" => "a", "א" => "a",
            "б" => "b", "ב" => "b", "þ" => "b",
            "ĉ" => "c", "ć" => "c", "ç" => "c", "ц" => "c", "צ" => "c", "ċ" => "c", "č" => "c", "©" => "c", "ץ" => "c",
            "Ч" => "ch", "ч" => "ch",
            "д" => "d", "ď" => "d", "đ" => "d", "ד" => "d", "ð" => "d",
            "è" => "e", "ę" => "e", "é" => "e", "ë" => "e", "ê" => "e", "е" => "e", "ē" => "e", "ė" => "e", "ě" => "e", "ĕ" => "e", "є" => "e", "ə" => "e", "ע" => "e",
            "ф" => "f", "ƒ" => "f",
            "ğ" => "g", "ġ" => "g", "ģ" => "g", "ĝ" => "g", "г" => "g", "ג" => "g", "ґ" => "g",
            "ח" => "h", "ħ" => "h", "х" => "h", "ĥ" => "h", "ה" => "h",
            "i" => "i", "ï" => "i", "î" => "i", "í" => "i", "ì" => "i", "į" => "i", "ĭ" => "i", "ı" => "i", "и" => "i", "ĩ" => "i", "ǐ" => "i", "י" => "i", "ї" => "i", "ī" => "i", "і" => "i",
            "й" => "j", "Й" => "j", "Ĵ" => "j", "ĵ" => "j",
            "ĸ" => "k", "כ" => "k", "ķ" => "k", "к" => "k", "ך" => "k",
            "ł" => "l", "ŀ" => "l", "л" => "l", "ļ" => "l", "ĺ" => "l", "ľ" => "l", "ל" => "l",
            "מ" => "m", "м" => "m", "ם" => "m",
            "ñ" => "n", "ń" => "n", "н" => "n", "ņ" => "n", "ן" => "n", "ŋ" => "n", "נ" => "n", "ŉ" => "n", "ň" => "n",
            "ø" => "o", "ó" => "o", "ò" => "o", "ô" => "o", "õ" => "o", "о" => "o", "ő" => "o", "ŏ" => "o", "ō" => "o", "ǿ" => "o", "ǒ" => "o", "ơ" => "o",
            "פ" => "p", "ף" => "p", "п" => "p",
            "ק" => "q",
            "ŕ" => "r", "ř" => "r", "ŗ" => "r", "ר" => "r", "р" => "r", "®" => "r",
            "ş" => "s", "ś" => "s", "ș" => "s", "š" => "s", "с" => "s", "ŝ" => "s", "ס" => "s",
            "т" => "t", "ț" => "t", "ט" => "t", "ŧ" => "t", "ת" => "t", "ť" => "t", "ţ" => "t",
            "ù" => "u", "û" => "u", "ú" => "u", "ū" => "u", "у" => "u", "ũ" => "u", "ư" => "u", "ǔ" => "u", "ų" => "u", "ŭ" => "u", "ů" => "u", "ű" => "u", "ǖ" => "u", "ǜ" => "u", "ǚ" => "u", "ǘ" => "u",
            "в" => "v", "ו" => "v",
            "ý" => "y", "ы" => "y", "ŷ" => "y", "ÿ" => "y",
            "ź" => "z", "ž" => "z", "ż" => "z", "з" => "z", "ז" => "z", "ſ" => "z",
            "™" => "tm",
            "@" => "at",
            "Ä" => "ae", "Ǽ" => "ae", "ä" => "ae", "æ" => "ae", "ǽ" => "ae",
            "ĳ" => "ij", "Ĳ" => "ij",
            "я" => "ja", "Я" => "ja",
            "Э" => "je", "э" => "je",
            "ё" => "jo", "Ё" => "jo",
            "ю" => "ju", "Ю" => "ju",
            "œ" => "oe", "Œ" => "oe", "ö" => "oe", "Ö" => "oe",
            "щ" => "sch", "Щ" => "sch",
            "ш" => "sh", "Ш" => "sh",
            "ß" => "ss",
            "Ü" => "ue",
            "Ж" => "zh", "ж" => "zh",
        );
        return strtr($subject, $char_map);
    }

    /**
     * @return mixed
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return mixed
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * @return mixed
     */
    public function getAdded()
    {
        return $this->added;
    }

    /**
     * @return mixed
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @param mixed $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * @return mixed
     */
    public function getArtist()
    {
        return $this->artist;
    }

    /**
     * @param mixed $artist
     */
    public function setArtist($artist)
    {
        $this->artist = $artist;
    }

    /**
     * @return mixed
     */
    public function getNotes()
    {
        return $this->notes;
    }

    /**
     * @param mixed $notes
     */
    public function setNotes($notes)
    {
        $this->notes = $notes;
    }

    /**
     * @return mixed
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * @param mixed $key
     */
    public function setKey($key)
    {
        $this->key = $key;
    }

    /**
     * @return array
     */
    public function getExamples()
    {
        return $this->examples;
    }

    /**
     * @param array $examples
     */
    public function setExamples($examples)
    {
        $this->examples = $examples;
    }
}